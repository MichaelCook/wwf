#!/usr/bin/python2.7

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
Usage: %this [options] LETTERS

Words With Friends.  Given a set tiles and a board, find words that could be
played.  The board is read from stdin.  The possible plays are written to
stdout.

Arguments:
  LETTERS     The set of tiles in your tray.

Options:
  -w --words FILE       List of allowed words.
  --debug               Enable debug logging.
  -d --debug-word WORD  Enable debug logging only for this word.
  -h --help

"""
import sys, os, re, datetime, docopt

args = docopt.docopt(__doc__.replace("%this", os.path.basename(sys.argv[0])))

debug = args["--debug"]
debug_word = args["--debug-word"]
if debug_word:
    debug_word = debug_word.upper()

word_list = args["--words"]
if word_list is None:
    # http://blogmybrain.com/words-with-friends-cheat/words.txt
    word_list = "/home/michael/site/words.txt"
    #word_list = "/usr/share/dict/words"

letter_value = { "A": 1, "B": 4, "C": 4, "D": 2, "E": 1, "F": 4, "G": 3,
                 "H": 3, "I": 1, "J": 10, "K": 5, "L": 2, "M": 4, "N": 2,
                 "O": 1, "P": 4, "Q": 10, "R": 1, "S": 1, "T": 1, "U": 2,
                 "V": 5, "W": 4, "X": 8, "Y": 3, "Z": 10, "_": 0 }

letter_count = { "A": 9, "B": 2, "C": 2, "D": 5, "E": 13, "F": 2, "G": 3,
                 "H": 4, "I": 8, "J": 1, "K": 1, "L": 4, "M": 2, "N": 5,
                 "O": 8, "P": 2, "Q": 1, "R": 6, "S": 5, "T": 7, "U": 4,
                 "V": 2, "W": 2, "X": 1, "Y": 2, "Z": 1, "_": 2 }

tray = args["LETTERS"].upper()

if len(tray) == 7:
    print "Tray:", tray
else:
    print "Tray: %s (%s letter%s)" % \
        (tray, len(tray), "" if len(tray) == 1 else "s")

empty_board = """
|. . . tw. . tl. tl. . tw. . . |
|. . dl. . dw. . . dw. . dl. . |
|. dl. . dl. . . . . dl. . dl. |
|tw. . tl. . . dw. . . tl. . tw|
|. . dl. . . dl. dl. . . dl. . |
|. dw. . . tl. . . tl. . . dw. |
|tl. . . dl. . . . . dl. . . tl|
|. . . dw. . . + . . . dw. . . |
|tl. . . dl. . . . . dl. . . tl|
|. dw. . . tl. . . tl. . . dw. |
|. . dl. . . dl. dl. . . dl. . |
|tw. . tl. . . dw. . . tl. . tw|
|. dl. . dl. . . . . dl. . dl. |
|. . dl. . dw. . . dw. . dl. . |
|. . . tw. . tl. tl. . tw. . . |
""".split("\n")
empty_board.pop(0)              # remove blank line at beginning
empty_board.pop()               # remove blank line at end
if debug:
    print "== empty =="
    for row in empty_board:
        print row

def make_board(value):
    return [[value for col in xrange(15)] for row in xrange(15)]

letter_multiplier = make_board(1)
word_multiplier = make_board(1)
for row in xrange(15):
    for col in xrange(15):
        sq = empty_board[row][col * 2 + 1 : col * 2 + 3]
        #print row, col, sq
        if sq == "tw":
            word_multiplier[row][col] = 3
        elif sq == "dw":
            word_multiplier[row][col] = 2
        elif sq == "tl":
            letter_multiplier[row][col] = 3
        elif sq == "dl":
            letter_multiplier[row][col] = 2
if debug:
    print "== word multiplier =="
    for row in word_multiplier:
        print row
    print "== letter multiplier =="
    for row in letter_multiplier:
        print row

# Read the input board.  The input format looks like this:
#        |
# ...k...........
# ..piety........
# ...d...........
# r..dither......
# a..i...........
# zebec....v.....
# e...o....i.....
# ...exordia.g...-
# ....a..i...h...
# .jAil..e.faiths
# .......t.o....p
# ...crows.a.genu
# ...w.....m....n
# ..emoter.e.....
# ...s...eddo....
#
# Upper case means it was a blank tile.
#
# Here's an empty board:
#
#         |
#  ...+..+.+..+...
#  ..+..+...+..+..
#  .+..+.....+..+.
#  +..+...+...+..+
#  ..+...+.+...+..
#  .+...+...+...+.
#  +...+.....+...+
# -...+...+...+...-
#  +...+.....+...+
#  .+...+...+...+.
#  ..+...+.+...+..
#  +..+...+...+..+
#  .+..+.....+..+.
#  ..+..+...+..+..
#  ...+..+.+..+...
#         |
#
# The +'s indicate dw/tw/dl/tl squares and the center (not checked).
#
# We update word_multiplier and letter_multiplier as we read the input board.
# For any squares that already contain a tile, the multipliers will not apply
# this time and so we reset them to 1.
input_board = make_board(" ")
row = 0
nonwhite_re = re.compile('.*\S')
for line in sys.stdin:
    if "-*-" in line:           # Ignore EMACS "local variable" directives.
        continue
    line = line.strip("\r\n -|")
    if not nonwhite_re.match(line):
        continue
    if len(line) != 15:
        sys.exit("Invalid input line: |" + line + "|")
    for col in xrange(15):
        letter = line[col : col + 1]
        if letter == "." or letter == "+":
            input_board[row][col] = " "
        elif letter >= "a" and letter <= "z":
            letter = letter.upper()
            input_board[row][col] = letter
            word_multiplier[row][col] = 1
            letter_multiplier[row][col] = 1
            letter_count[letter] -= 1
        elif letter >= "A" and letter <= "Z":
            # Upper case means it was a blank tile.  It has a specific letter,
            # but the letter score is zero.
            input_board[row][col] = letter
            word_multiplier[row][col] = 1
            letter_multiplier[row][col] = 0
            letter_count["_"] -= 1
        else:
            sys.exit("Invalid input square |" + letter + "|")
    row += 1
if row != 15:
    sys.exit("Wrong number of input lines: " + str(row) + " != 15")
if debug:
    print "== input board =="
    for row in input_board:
        print row
    print "== word multiplier =="
    for row in word_multiplier:
        print row
    print "== letter multiplier =="
    for row in letter_multiplier:
        print row

# -----------------------------------------------------------------------------
# Show remaining letters.
# unseen is the total number of tiles unseen by me (either on the opponent's
# tray or not yet drawn).
for letter in tray:
    letter_count[letter] -= 1
unseen = 0
rem = list()
for letter, count in letter_count.items():
    if count < 0:
        print "Too many", letter + "'s on the board", "(%d)" % -count
        continue
    if count == 1:
        rem.append(letter)
    elif count != 0:
        rem.append(letter + str(count))
    unseen += count
# The opponent can't have more than 7 tiles on their tray, and if there
# are any undrawn then the opponent must have exactly 7 on their tray.
undrawn = unseen - 7
if undrawn < 0:
    undrawn = 0
print "Remaining letters (" + str(undrawn) + '+' + str(unseen - undrawn) + \
    '=' + str(unseen) + "):", " ".join(sorted(rem))

# -----------------------------------------------------------------------------
# Read the word list.  Skip words that contain punctuation or upper case
# letters.
good_word = re.compile('^[a-z]+$')
words = set()
with open(word_list) as f:
    for word in f:
        word = word.strip()
        if good_word.match(word):
            words.add(word.upper())
if debug: print "words", len(words), "from", word_list

# -----------------------------------------------------------------------------
# Extract the largest word that is horizontal through ROW,COL.
# Return WORD,LEFT,RIGHT.
def adjacent_horizontal(row, col):
    left = col
    while left > 0 and input_board[row][left - 1] != " ":
        left -= 1
    right = col
    while right < 14 and input_board[row][right + 1] != " ":
        right += 1
    if left == right:
        return None
    word = ""
    col = left
    while col <= right:
        word += input_board[row][col]
        col += 1
    return word, left, right

# -----------------------------------------------------------------------------
# Extract the largest word that is vertical through ROW,COL.
# Return WORD,TOP,BOTTOM.
def adjacent_vertical(row, col):
    top = row
    while top > 0 and input_board[top - 1][col] != " ":
        top -= 1
    bottom = row
    while bottom < 14 and input_board[bottom + 1][col] != " ":
        bottom += 1
    if top == bottom:
        return None
    word = ""
    row = top
    while row <= bottom:
        word += input_board[row][col]
        row += 1
    return word, top, bottom

# -----------------------------------------------------------------------------
# Calculate the on-board score of the word WORD if it were to be played at
# ROW,COL.  ACROSS is True for a horizontal placement, or False for a vertical
# placement.  If we're considering playing any blanks this turn then (r,c) in
# played_blank will be True.  Returns the score with dl/tl/dw/tw multipliers
# factored in.
def sum_score(row, col, across, word, played_blank):
    #print "sum_score", row, col, across, word, played_blank
    sum = 0
    wm = 1
    for letter in word:
        wm *= word_multiplier[row][col]
        if (row, col) not in played_blank:
            sum += letter_value[letter] * letter_multiplier[row][col]
        if across:
            col += 1
        else:
            row += 1
    #print "sum_score", sum, wm, sum * wm
    return sum * wm

# -----------------------------------------------------------------------------
# True if any of the letters in row ROW from columns LEFT to RIGHT (inclusive)
# are in the undo list UNDO meaning they were tiles played from our tray.
def in_undo_list_horizontal(undo, row, left, right):
    for r, c in undo:
        if r == row and c >= left and c <= right:
            return True
    return False

# -----------------------------------------------------------------------------
# True if any of the letters in column COL from rows TOP to BOTTOM (inclusive)
# are in the undo list UNDO meaning they were tiles played from our tray.
def in_undo_list_vertical(undo, col, top, bottom):
    for r, c in undo:
        if c == col and r >= top and r <= bottom:
            return True
    return False

# -----------------------------------------------------------------------------
# PLAYS is the list of words we could possibly play.
plays = list()

# -----------------------------------------------------------------------------
# See if WORD fits at ROW, COL.  ACROSS is true for a horizontal fit or false
# for a vertical fit.
#
# Basically, the rules are:
#
# 1. for each square, either the square is empty or it's the same as the
#    letter we're trying to play
#
# 2. at least one square is empty
#
# 3. there has to be at least one adjacent non-empty tile or we use the center
#    square
#
# 4. all adjacent words must be valid
#
# 5. each letter we would play must be in our tray, and we must not use any
#    letter from our tray more than once
#
# Blanks complicate things somewhat.
#
# If we find a valid fit, calculate the score (taking into account dl/tl/dw/tw
# multipliers, adjacent words, etc.) and add a line to the global PLAYS
# describing the fit.
#
# On return, input_board is the same.
def fit(word, row, col, across):
    if debug: print "fit", word, row, col, "across" if across else "down"

    # A list of (row,col) pairs of board locations that will need to be
    # changed back to empty when we're done trying fits.
    undo = list()

    # Additional words we get from adjacent words.
    other_words = list()

    try:
        would_play = ""         # Letters we would play from our tray.
        # actual_play is like would_play, but:
        #   - lower case is a tile that is already on the board
        #   - upper case is a tile we would place on the board
        #   - <X> is a blank we would play as the letter X.
        actual_play = ""
        score = 0
        if debug: print "a-score", score
        remaining_letters = tray
        adjacent = False
        r = row
        c = col
        word_mult = 1
        played_blank = set()
        for letter in word:
            if letter == input_board[r][c]:
                # The letter we need is already on the board in this square.
                adjacent = True
                # The letter multiplier will be either 0 or 1.
                score += letter_value[letter] * letter_multiplier[r][c]
                if debug: print "b-score", letter, letter_value[letter], letter_multiplier[r][c], score, "at", r, c
                actual_play += letter.lower()
            elif input_board[r][c] == ' ':
                new_rem = remaining_letters.replace(letter, "", 1)
                if new_rem == remaining_letters:
                    # Letter wasn't in our tray. Do we have a blank?

                    # \bug If the letter the blank would represent appears
                    # multiple times in the trial word, then there are
                    # multiple solutions, but this code currently tries only
                    # one of them.  For example, if the trial word were
                    # "beer", we could spell "be_r" or "b_er", but this code
                    # considers only the former.  The latter might be a higher
                    # score if dl or tl squares were involved.
                    new_rem = remaining_letters.replace("_", "", 1)
                    if new_rem == remaining_letters:
                        # No blank.
                        return
                    # Zero score for a blank.
                    played_blank.add((r, c))
                    actual_play += "<" + letter + ">"
                else:
                    score += letter_value[letter] * letter_multiplier[r][c]
                    if debug: print "c-score", letter, letter_value[letter], letter_multiplier[r][c], score, "at", r, c
                    actual_play += letter
                would_play += letter
                remaining_letters = new_rem
                undo.append((r, c))
                input_board[r][c] = letter
                word_mult *= word_multiplier[r][c]
            else:
                # Square already has a different tile.
                return
            if across:
                c += 1
            else:
                r += 1
        if len(would_play) == 0:
            return

        # The full word is the same as the new word except that it might also
        # have adjacent letters at the beginning or end.  Validate the full
        # word.  Plus add the values of the adjacent letters, but not for any
        # that was a blank.
        if across:
            full_word, left, right = adjacent_horizontal(row, col)
            if full_word not in words:
                if debug: print "adjh", "|" + full_word + "|", row, col, "(invalid)"
                return
            if debug: print "adjh", "|" + full_word + "|", row, col
            c = left
            clast = col + len(word) - 1
            while c <= right:
                if c < col or c > clast:
                    letter = input_board[r][c]
                    score += letter_value[letter] * letter_multiplier[r][c]
                c += 1
        else:
            full_word, top, bottom = adjacent_vertical(row, col)
            if full_word not in words:
                if debug: print "adjh", "|" + full_word + "|", row, col, "(invalid)"
                return
            if debug: print "adjh", "|" + full_word + "|", row, col
            r = top
            rlast = row + len(word) - 1
            while r <= bottom:
                if r < row or r > rlast:
                    letter = input_board[r][c]
                    score += letter_value[letter] * letter_multiplier[r][c]
                r += 1

        # Check all adjacent words.
        r = row
        c = col
        using_center = False
        more_score = 0
        for letter in word:
            if r == 7 and c == 7:
                using_center = True
            if across:
                adj = adjacent_vertical(r, c)
                if adj:
                    other_word, top, bottom = adj
                    if other_word not in words:
                        if debug: print "adjv", "|" + other_word + "|", r, c, "(invalid)"
                        return
                    if debug: print "adjv", "|" + other_word + "|", r, c
                    adjacent = True
                    if in_undo_list_vertical(undo, c, top, bottom):
                        # We played at least one new tile in this vertical word.
                        ms = sum_score(top, c, False, other_word, played_blank)
                        if debug: print "more", ms
                        more_score += ms
                        other_words.append(other_word)
                    else:
                        if debug: print "not in undo list vertical"
                c += 1
            else:
                adj = adjacent_horizontal(r, c)
                if adj:
                    other_word, left, right = adj
                    if other_word not in words:
                        if debug: print "adjh", "|" + other_word + "|", r, c, "(invalid)"
                        return
                    if debug: print "adjh", "|" + other_word + "|", r, c
                    adjacent = True
                    if in_undo_list_horizontal(undo, r, left, right):
                        # We played at least one new tile in this horizontal word.
                        m = sum_score(r, left, True, other_word, played_blank)
                        if debug: print "more", m
                        more_score += m
                        other_words.append(other_word)
                    else:
                        if debug: print "not in undo list horizontal"
                r += 1
    finally:
        while undo:
            r, c = undo.pop()
            input_board[r][c] = " "

    if not using_center and not adjacent:
        return

    score *= word_mult
    if debug: print "d-score", score, word_mult
    score += more_score
    if debug: print "e-score", score, more_score
    if len(tray) == 7 and not remaining_letters:
        score += 35
        if debug: print "f-score", score

    # Add a string to the global list PLAYS describing this possible play.
    # The string is formatted so that we can easily sort by score.
    s = "%3d %-10s %2d %2d %-3.3s" % \
        (score, word, row, col,
         "across" if across else "down")
    if word != full_word:
        s += " as " + full_word
    if not remaining_letters:
        s += " [whole tray]"
    if other_words:
        s += " (" + " ".join(other_words) + ")"
    if word != actual_play:
        s += " " + actual_play
    plays.append(s)
    if debug: print "play", s.strip()

# -----------------------------------------------------------------------------
# Validate all of the words already on the board.
for row in xrange(15):
    for col in xrange(15):
        if input_board[row][col] == " ":
            continue
        adj = adjacent_vertical(row, col)
        if adj:
            other_word, top, bottom = adj
            if top == row and other_word not in words:
                print other_word, "is not a word at", top, col, "down"
        adj = adjacent_horizontal(row, col)
        if adj:
            other_word, left, right = adj
            if left == col and other_word not in words:
                print other_word, "is not a word at", row, left, "across"

# -----------------------------------------------------------------------------
# Try every word in the word list on every horizontal and vertical position on
# the board.  Some placements will not be valid (e.g., there's already another
# word there); fit() will ignore those.  When done, we have the unordered
# global list PLAYS describing the possible plays.
start = datetime.datetime.now()
for word in words:
    if debug_word:
        debug = word == debug_word
    if debug: print "try", word
    for i in xrange(15):
        for j in xrange(0, 16 - len(word)):
            fit(word, i, j, True)
            fit(word, j, i, False)
end = datetime.datetime.now()

# -----------------------------------------------------------------------------
# Show the possible plays reverse-sorted by score.
print len(plays), \
    "play" if len(plays) == 1 else "plays", \
    "in", end - start
for play in sorted(plays, reverse=True):
    print play
